#!/bin/bash
#Este script en realidad hace más que la detección:
# 1.- Detecta
# 2.- Configura
# 3.- Levanta servicios 


there_is_sangoma_card=false
there_is_misdn_card=false
null_redirect_verbose="&>/dev/null"

is_module_loaded()
{
        is_loaded=true;
        /sbin/lsmod | /bin/grep -i "$1"  &>/dev/null

        if [ $? != 0 ]; then #si me devuelce 0 es por que si hay modulos, caso contrario no encontro modulos
                is_loaded=false
        fi
        echo $is_loaded
}

is_asterisk_loaded()
{
        is_loaded=true;
        /sbin/service asterisk status | grep "is running"  &>/dev/null
        if [ $? != 0 ]; then #si me devuelce 0 es por que esta arriba el servicio
                is_loaded=false
        fi
        echo $is_loaded
}

options_help() {
        echo >&2 "Options:"
        echo >&2 "  -h: help"
        echo >&2 "  -m: enable detection cards mISDN"
        echo >&2 "  -t: enable detection cards sangoma"
        echo >&2 "  -v: verbose"
}


while getopts 'hmtv' arg
do
        case "$arg" in
                h) options_help; exit 0;;
		m) there_is_misdn_card=true;;
                t) there_is_sangoma_card=true;;
                v) null_redirect_verbose="";;
                *) echo >&2 "unknown parameter -$arg, Aborting"; options_help; exit 1;;
        esac
done

shift $(( $OPTIND-1 ))
if [ $# != 0 ]; then
        echo >&2 "$0: too many parameters"
        options_help
        exit 1
fi

####################################################################
############################ Process Start #########################
####################################################################

echo -e "Starting detection cards ..."

if [ `is_asterisk_loaded` = true ]; then
	echo -e "Step 1: Stoping service asterisk ..." 
	eval "/usr/sbin/amportal stop  $null_redirect_verbose"
fi

if [ $? = 0 ] && [ `is_module_loaded "wanpipe"` = true ]; then
	echo -e "Step 2: Unmounting modules sangoma ..."
	echo -e "        Stoping service wanrouter ..."
	eval "/sbin/service wanrouter stop  $null_redirect_verbose"
fi

if [ $? = 0 ] && [ $there_is_misdn_card = false ]; then
        echo -e "Step 3: Unmounting modules mISDN ..."
        echo -e "         Stoping service mISDN ..."
        eval "/sbin/service mISDN stop $null_redirect_verbose"
        eval "/sbin/chkconfig --level 2345 mISDN off $null_redirect_verbose"
fi

if [ $? = 0 ] && [ $there_is_sangoma_card = true ]; then
	echo -e "Step 4: Detecting sangoma cards ..."
	eval "/usr/sbin/wancfg_zaptel --silent  $null_redirect_verbose"
fi

if [ $? = 0 ]; then
	echo -e "Step 5: Detecting dahdi cards ..." 
	eval "/usr/sbin/dahdi_genconf $null_redirect_verbose"
fi

if [ $? = 0 ]; then
	echo -e "Step 6: Mounting modules dahdi ..."
	echo -e "        Starting service dahdi ..."
	eval "/sbin/service dahdi start  $null_redirect_verbose"
fi

if [ $? = 0 ] && [ $there_is_sangoma_card = true ] && [ `is_module_loaded "wanpipe"` = false ]; then
	echo -e "Step 7: Mounting modules sangoma ..."
	echo -e "        Restoring service wanrouter ..."
	eval "/sbin/service wanrouter restart  $null_redirect_verbose"
fi

#if [ $? = 0 ]; then
#	echo -e "Step 8: Generating configs files /etc/zaptel.conf y /etc/asterisk/zapata-channels.conf ..."
#	/usr/sbin/genzaptelconf -x $genzaptelconf_verbose
#fi

if [ $? = 0 ] && [ $there_is_misdn_card = true ]; then
        echo -e "Step 9: Detecting mISDN cards ..."
        eval "/sbin/service mISDN scan $null_redirect_verbose"
	echo -e "Step 10: Configuring mISDN cards ..."
	eval "/sbin/service mISDN config $null_redirect_verbose"
	echo -e "Step 11: Mounting modules mISDN ..."
	echo -e "         Starting service mISDN ..."
	eval "/sbin/service mISDN start $null_redirect_verbose"
	eval "/sbin/chkconfig --level 2345 mISDN on $null_redirect_verbose"
fi

if [ $? = 0 ]; then
        echo -e "Step 12: Restoring service asterisk ..."
        eval "/usr/sbin/amportal restart  $null_redirect_verbose"
fi

echo -e "End detection cards ..."
